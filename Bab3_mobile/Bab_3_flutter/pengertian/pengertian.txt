Apa itu flutter?
Flutter adalah framework open-source yang dikemabangkan oleh google untuk membangun aplikasi native multi platform, seperti android,IOS,Web,dan desktop.dari satu basis code(codebase)yang sama

Mengapa Menggunakan Flutter?
1.  Single Codebase: kita hanya perlu menulis kode satu kali untuk semua platform(android,iOS,web,desktop)
2.  HotReload: Memungkingkan kita untuk melihat perubahan yang dilakukan pada kode secara instan.
3.  Native performance: memanfaatkan rendering khusus untuk memastikan kinerja aplikasi mendekati native, jadi apk yang dibngun flutter itu bisa berjalan lancar pada berbagai platform
4.  Rich Widget: Flutter itu menyediakan banyak widget yang bisa memudahkan pengembang untuk membuat tampilan antar muka yang kaya, menarik dan responsif.
5.  Dukungan komunitas yang kuat: dikarenakan dikembangkan langsung oleh google maka dari itu fluter mempunyai komunitas yang kuat dan luas.

Bagaimana cara flutter bekerja?
Flutter menggunakan arsitektur berbasis widget, yang berarti setiap elemen di layar adalah widget. Mulai dari teks, tombol, gambar, hingga tata letak layout semuanya merupakan widget. 
Flutter juga menggunakan konsep komposisi, di mana widget bisa saling dibungkus (nested) untuk membentuk tampilan yang kompleks.

import 'package:flutter/material.dart'; 

void main(){
  runApp(MaterialApp(
    home: Scaffold(
      appBar: AppBar(
        title: Text('Hello Flutter'),
      ),
      body: Center(
        child: Text('Hello Flutter'),
      ),
    ),
  ));
}

#penjelasan#
1.  MaterialApp: adalah widget root yang mangatur tema dan navigasi aplikasi
2.  Scaffold:  Adalah kerangka dasar dari halaman aplikasi 
3.  Appbar: Bar bagian atas layar yang berfungsi sebagai judul halaman
4.  Center: Wigdet yang memusatkan teks atau bar berada pada tengah layar.

MaterialApp
Widget MaterialApp adalah titik masuk untuk aplikasi berbasis Material Design di Flutter.

import 'package:flutter/material.dart'; 

void main(){
  runApp(MaterialApp(
    title: 'Material App Contoh',
    theme: ThemeData(
      primarySwatch: Colors.blue,
    ),
    home: Scaffold(
      appBar: AppBar(
        title: Text('Halaman Rumah'),
      ),
      body: Center(
        child: Text('selamat datang teman'),
      ),
    ),
  ));
}

#penjelasan#
1.  Title: menyediakan judul aplikasi yang akan di tampilkan saat apk berjalan
2.  theme: mengatur tema aplikasi dengan menggunakan palet warna yang konsisten diseluruh aplikasi
3.  home: menentukan halaman utama yang akan ditampilkan saat aplikasi dijalankan 

Scaffold
adalah struktur utama dari flutter yang menyediakan layout dasar untuk halaman seperti AppBar, body, dan floating button. widget ini digunakan untk membuat tata letak yang konsisten dan terstruktur.

import 'package:flutter/material.dart'; 

void main(){
  runApp(MaterialApp(
    home: Scaffold(
      appBar: AppBar(
        title: Text('Contoh scafold'),
      ),
      floatingActionButton: FloatingActionButton(
        onPressed: () {
          print('button pressed');
        },
        child: Icon(Icons.add),
      ),
    ),
  ));
}

#penjelasan#
1.  Appbar: Bagian header aplikasi yang biasanya berisi judul dan tombol aksi
2.  body: Area utama halaman yang menampilkan isi konten, dalam contoh ini adalah teks di tengah halaman.
3.  FloatingActionButton: Tombol yang biasanya digunakan untuk tindakan penting seperti menambah data.

Container
adalah widget serba guna yang digunakan untuk mengatur layout dan styling seperti, padding, margin, border, dan lainya. container juga sangat flexibel dan bisa diisi dengan widget lain sebagai childnya

import 'package:flutter/material.dart'; 

void main() {
  runApp(
    MaterialApp(
      home: Scaffold(
        body: Center(
          child: Container(
            width: 200,
            height: 100,
            padding: EdgeInsets.all(10),
            margin: EdgeInsets.all(20),
            color: Colors.blue,
            child: Center(
              child: Text(
                'contoh container',
                style: TextStyle(color: Colors.white),
              ),
            ),
          ),
        ),
      ),
    ),
  );
}

#penjelasan#
1.  width & height: Mengatur lebar dan tinggi container.
2.  padding: Memberi jarak di dalam container antara konten dan batas container.
3.  margin: Memberi jarak di luar container terhadap elemen di sekitarnya
4.  color: Memberikan warna latar belakang pada container.
5.  child: Container dapat memiliki satu widget anak, dalam contoh ini kita menggunakan Text yang dipusatkan.

Fluter Logo 
FlutterLogo adalah widget khusus yang secara otomatis menampilkan logo Flutter. Cocok digunakan saat kamu ingin membuat aplikasi dengan branding Flutter.

Elevated Button
ElevatedButton adalah tombol yang memberikan efek 'mengangkat' ketika ditekan, memberikan pengalaman interaktif bagi pengguna

Icon
Icon digunakan untuk menampilkan ikon yang biasanya digunakan di tombol atau AppBar

Image
Image adalah widget yang digunakan untuk menampilkan gambar. Kamu bisa memuat gambar dari berbagai sumber, baik itu dari internet atau penyimpanan lokal. 

import 'package:flutter/material.dart';

void main (){
  runApp(MaterialApp(
    home: Scaffold(
      appBar: AppBar(
        title: Text('contoh image'),
      ),
      body: Center(
        child: Image.asset('assets/images/instagram.png'),
      ),
    ),
  ));
}

#pengertian#
Widget Image.asset() digunakan untuk menampilkan gambar dari
penyimpanan lokal.
b. Gambar diambil dari jalur assets/images/instagram.png, sesuai dengan yang sudah
didaftarkan di file pubspec.yaml

import 'package:flutter/material.dart';

void main (){
  runApp(MaterialApp(
    home: Scaffold(
      appBar: AppBar(
        title: Text('contoh image'),
      ),
      body: Center(
        child: Image.asset(
          'assets/images/instagram.png',
          width: 300,
          height: 200,
          fit: BoxFit.cover,
          ),

      ),
    ),
  ));
}

#penjelasan#
1.  width dan height digunakan untuk menentukan ukuran gambar
2.  fit mengatur bagaimana gambar ditampilkan di dalam area yang ditentukan. Beberapa pilihan untuk fit termasuk BoxFit.cover, BoxFit.contain, BoxFit.fill, dll
cara mengatasi ketika gambar tidak ditemukan maka gunakkan
errorBuilder: (context, error, stackTrace) {
            return Text("gambar tidak ditemukan",style: TextStyle(color: Colors.red),);
          },

Visible vs Invisible Widget
1.  Visible Widgets: Widget yang terlihat langsung di layar, seperti Text, Image, atau Button
2.  Invisible Widgets (Layouting Widgets): Widget yang digunakan untuk mengatur tata letak dan tidak terlihat secara langsung, seperti Center, Column, Row, dll

coloumn
coloumn adalah tataletak vertikal

Center
dia memusatkan konten agar berada pada tengah layar

coloumn
menampilkan widget secara vertikal

Row
widget yang mengatur secara horizontal

Stack 
kita bisa dapat menumpuk widget satu sama diatas yang lain

SingleChildScrolView
digunakan untuk membuat widget yang bisa di scroll

listView
untuk menampilkan daftar dari item yang bisa digulir

gridView
untuk menampilkan item dari bentuk grid(tata letak kotak)

Extrack widget
pembungkusan sebagian code agar bisa digunakan dimana saja

Mapping Collection ke Widget
memungkinkan kita memetakan koleksi data (seperti
daftar) menjadi widget yang bisa ditampilkan di layar

widgetBuilder
menampilkan daftar atau grid secara dinamis (misalnya mengambil
data dari server), 

listView.Builder
ListView.builder digunakan untuk membuat daftar yang bisa discroll di mana setiap item dibangun secara dinamis saat muncul di layar